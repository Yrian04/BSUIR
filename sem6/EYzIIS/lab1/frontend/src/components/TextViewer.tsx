// TextViewer.tsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import {
  getTextById,
  getWordFormsByTextId,
  updateWordFormDescription,
} from '../services/api';
import { groupWordFormsByLemma } from '../utils/groupWordForms';
import { TreeNodeComponent } from './Tree';
import { TreeNode } from '../types';

import { Search, Edit2 } from 'lucide-react';

export const TextViewer: React.FC = () => {
  const { textId } = useParams<{ textId: string }>();
  const [fileName, setFileName] = useState<string | null>(null);
  const [wordForms, setWordForms] = useState<TreeNode[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  

  useEffect(() => {
    const fetchData = async () => {
      try {
        const textData = await getTextById(Number(textId));
        setFileName(textData.file); // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞

        const wordFormData = await getWordFormsByTextId(Number(textId), currentPage);
        setWordForms(groupWordFormsByLemma(wordFormData));
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–ª–æ–≤–æ—Ñ–æ—Ä–º—ã');
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [textId, currentPage]);

  const handleUpdateDescription = async (wordFormId: number, newDesc: string) => {
    try {
      // –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–ª–æ–≤–æ—Ñ–æ—Ä–º—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      const [wf] = wordForms
        .flatMap(node => node.type === 'lemma' ? node.children || [] : [])
        .filter(child => child.id === wordFormId);
      
      // if (!wf || !wf.wordForm) return;
  
      alert('onBlur' + wordFormId + newDesc)
      // –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç WordFormModel
      const updatedWordForm = {
        ...wf.wordForm,
        description: newDesc
      };
  
      // –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await updateWordFormDescription(Number(textId), wordFormId, updatedWordForm);
  
      // –û–±–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setWordForms(prev =>
        prev.map(lemmaNode => {
          if (lemmaNode.type === 'lemma' && lemmaNode.children) {
            return {
              ...lemmaNode,
              children: lemmaNode.children.map(child =>
                child.id === wordFormId 
                  ? { ...child, description: newDesc } 
                  : child
              )
            };
          }
          return lemmaNode;
        })
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    }
  };

  if (loading) {
    return (
      <div className="text-center py-10">
        <p className="text-xl">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-10">
        <p className="text-xl text-red-500">{error}</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-10">
      <div className="mb-6 flex justify-between items-center">
        <h2 className="text-3xl font-bold">–¢–µ–∫—Å—Ç #{textId}</h2>
      </div>
  
      {/* ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ PDF */}
      {fileName && (
        <div className="mb-8">
          <div className="bg-white rounded-xl shadow-sm overflow-hidden">
            <iframe
              src={`http://localhost:8000/files/${encodeURIComponent(fileName)}`} // ‚úÖ URL –¥–æ —Ñ–∞–π–ª–∞
              className="w-full"
              style={{ height: '70vh' }}
              title="PDF Viewer"
            />
          </div>
          <p className="text-sm text-gray-500 mt-2 text-center">
            –ü—Ä–æ—Å–º–æ—Ç—Ä PDF-—Ñ–∞–π–ª–∞
          </p>
        </div>
      )}

      {/* ‚úÖ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div className="mb-6 p-4 bg-blue-50 border-l-4 border-blue-500 text-blue-700 rounded">
        <h4 className="font-semibold">–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</h4>
        <ul className="list-disc list-inside mt-2 space-y-1">
          <li>üîπ –õ–µ–º–º—ã –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å –ø–æ –∫–ª–∏–∫—É</li>
          <li>üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤–æ—Ñ–æ—Ä–º—ã –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞</li>
          <li>üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞</li>
          <li>‚¨ÖÔ∏è‚û°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</li>
        </ul>
      </div>

      <div className="mb-6">
        <h3 className="text-2xl font-semibold mb-4">–°–ª–æ–≤–æ—Ñ–æ—Ä–º—ã</h3>
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          {wordForms.map(node => (
            <TreeNodeComponent 
              key={node.id} 
              node={node} 
              onUpdateDescription={handleUpdateDescription} 
            />
          ))}
        </div>
      </div>

      <div className="mt-6 flex justify-center">
        <div className="inline-flex items-center space-x-1">
          <button
            onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}
            disabled={currentPage === 1}
            className="px-3 py-1 bg-gray-200 rounded-md hover:bg-gray-300 disabled:opacity-50"
            title="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É" // ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞
          >
            ‚Üê
          </button>
          <span className="px-3 py-1">–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage}</span>
          <button
            onClick={() => setCurrentPage((p) => p + 1)}
            className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            title="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É" // ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞
          >
            ‚Üí
          </button>
        </div>
      </div>
    </div>
  );
};